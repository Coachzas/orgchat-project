import React, { useEffect, useState, useRef } from "react";
import axios from "axios";
import { io } from "socket.io-client";

export default function AdminDashboard() {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [updatingId, setUpdatingId] = useState(null);
  const socket = useRef(null);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  useEffect(() => {
    axios
      .get("http://localhost:3005/api/admin/users", { withCredentials: true })
      .then((res) => {
        setUsers(res.data);
        setLoading(false);
      })
      .catch((err) => {
        console.error(err);
        setError("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ (‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)");
        setLoading(false);
      });
  }, []);

  // ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Socket.IO (‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå)
  useEffect(() => {
    socket.current = io("http://localhost:3005", {
      withCredentials: true,
    });

    // ‡∏ü‡∏±‡∏á event ‡πÄ‡∏°‡∏∑‡πà‡∏≠ role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    socket.current.on("role-updated", (data) => {
      console.log("üì¢ role-updated:", data);
      setUsers((prev) =>
        prev.map((u) => (u.id === data.id ? { ...u, role: data.role } : u))
      );
    });

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ event ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÇ‡∏ä‡∏ß‡πå popup ‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢)
    socket.current.on("announcement", (msg) => {
      alert(`üì¢ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô: ${msg.message}`);
    });

    return () => socket.current.disconnect();
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï role
  const handleChangeRole = async (id, newRole) => {
    if (!window.confirm(`‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Role ‡πÄ‡∏õ‡πá‡∏ô "${newRole}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) return;

    try {
      setUpdatingId(id);
      const res = await axios.put(
        `http://localhost:3005/api/admin/users/${id}/role`,
        { role: newRole },
        { withCredentials: true }
      );

      alert(res.data.message);
      setUsers((prev) =>
        prev.map((u) => (u.id === id ? { ...u, role: newRole } : u))
      );
    } catch (err) {
      console.error(err);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï role");
    } finally {
      setUpdatingId(null);
    }
  };

  if (loading) return <p style={{ padding: 20 }}>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>;

  if (error)
    return (
      <div style={{ padding: 20, color: "red" }}>
        {error}
        <br />
        <small>
          ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà{" "}
          <a href="http://localhost:3000/login">/login</a> ‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        </small>
      </div>
    );

  return (
    <div style={{ padding: "20px", fontFamily: "sans-serif" }}>
      <h2>üìä Admin Dashboard (Realtime)</h2>
      <p>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå</p>

      <table
        border="1"
        cellPadding="8"
        style={{
          width: "100%",
          marginTop: 10,
          borderCollapse: "collapse",
          background: "#f9f9f9",
        }}
      >
        <thead style={{ background: "#ddd" }}>
          <tr>
            <th>ID</th>
            <th>‡∏ä‡∏∑‡πà‡∏≠</th>
            <th>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
            <th>Role</th>
            <th>‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö</th>
            <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user) => (
            <tr key={user.id}>
              <td>{user.id}</td>
              <td>
                {user.firstName} {user.lastName}
              </td>
              <td>{user.email}</td>
              <td>{user.role}</td>
              <td>{user.about}</td>
              <td>
                <select
                  value={user.role}
                  disabled={updatingId === user.id}
                  onChange={(e) => handleChangeRole(user.id, e.target.value)}
                  style={{
                    padding: "6px",
                    borderRadius: "6px",
                    border: "1px solid #aaa",
                    background: "#fff",
                    cursor: "pointer",
                  }}
                >
                  <option value="employee">employee</option>
                  <option value="manager">manager</option>
                  <option value="admin">admin</option>
                </select>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
