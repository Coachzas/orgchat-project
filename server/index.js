// index.js
// üîπ ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô server OrgChat (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö group chat, voice/video call, ‡πÅ‡∏•‡∏∞ realtime ‡πÅ‡∏•‡πâ‡∏ß)

import express from "express";
import dotenv from "dotenv";
import cors from "cors";
import session from "express-session";
import cookieParser from "cookie-parser";

import AuthRoutes from "./routes/AuthRoutes.js";
import MessageRoutes from "./routes/MessageRoutes.js";
import FileRoutes from "./routes/FileRoutes.js";
import GroupRoutes from "./routes/GroupRoutes.js";
import AdminRoutes from "./routes/AdminRoutes.js";

import { Server } from "socket.io";

dotenv.config();
const app = express();

// üîß Middleware
app.use(
  cors({
    origin: "http://localhost:3000",
    credentials: true,
  })
);
app.use(express.json());
app.use(cookieParser());

// üîê Session
app.use(
  session({
    secret: process.env.SESSION_SECRET || "orgchat-secret",
    resave: false,
    saveUninitialized: false,
    cookie: {
      secure: false, // ‚úÖ true ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ https
      httpOnly: true,
      sameSite: "lax",
      maxAge: 1000 * 60 * 60 * 24, // 1 ‡∏ß‡∏±‡∏ô
    },
  })
);

// üñº Static Files
app.use("/uploads/images/", express.static("uploads/images"));
app.use("/uploads/audios/", express.static("uploads/audios"));
app.use("/uploads/files/", express.static("uploads/files"));

// üîπ Routes
app.use("/api/auth", AuthRoutes);
app.use("/api/messages", MessageRoutes);
app.use("/api/files", FileRoutes);
app.use("/api/groups", GroupRoutes);
app.use("/api/admin", AdminRoutes);

// üöÄ Start Server
const PORT = process.env.PORT || 3005;
const server = app.listen(PORT, () => {
  console.log(`üöÄ Server ‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡πà http://localhost:${PORT}`);
});

// üîå Socket.io Setup
const io = new Server(server, {
  cors: { origin: "http://localhost:3000", credentials: true },
});

app.set("io", io);

global.onlineUsers = new Map();

io.on("connection", (socket) => {
  console.log("‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ socket:", socket.id);
  global.chatSocket = socket;

  // üßç‚Äç‚ôÇÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà onlineUsers
  socket.on("add-user", (userId) => {
    onlineUsers.set(userId, socket.id);
    console.log(`‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ${userId}`);
    socket.broadcast.emit("online-users", {
      onlineUsers: Array.from(onlineUsers.keys()),
    });
  });

  // üö™ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
  socket.on("signout", (id) => {
    onlineUsers.delete(id);
    console.log(`‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö: ${id}`);
    socket.broadcast.emit("online-users", {
      onlineUsers: Array.from(onlineUsers.keys()),
    });
  });

  // üí¨ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (1-1)
  socket.on("send-msg", (data) => {
    const sendUserSocket = onlineUsers.get(data.to);

    const message = {
      id: Date.now(),
      senderId: data.from,
      receiverId: data.to,
      message: data.message,
      type: data.type,
      createdAt: new Date().toISOString(),
      messageStatus: "delivered",
    };

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ socket ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö ‚Äî ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
    if (sendUserSocket) {
      socket.to(sendUserSocket).emit("msg-receive", { message });
    }

    // ‚úÖ ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢ ‚Äî ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
    socket.emit("msg-receive", { message });
  });

  // üì¢ ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Group Chat
  // üß© ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
  socket.on("join-group", (groupId) => {
    socket.join(`group_${groupId}`);
    console.log(`üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${socket.id} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á group_${groupId}`);
  });

  // üì® ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° (‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡∏ó‡∏±‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö)
  socket.on("group-message-send", (data) => {
    const { groupId, from, message, type } = data;
    console.log(`üì® ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô group_${groupId} ‡∏à‡∏≤‡∏Å user ${from}: ${message}`);

    const msgData = {
      message: {
        id: Date.now(),
        senderId: from,
        groupId,
        message,
        type,
        createdAt: new Date().toISOString(),
        messageStatus: "delivered",
      },
    };

    // ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Ñ‡∏ô‡∏™‡πà‡∏á)
    socket.to(`group_${groupId}`).emit("group-message-receive", msgData);

    // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏™‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
    socket.emit("group-message-receive", msgData);
  });

  // üîä Voice & Video Calls
  // -----------------------------------------------

  socket.on("outgoing-voice-call", (data) => {
    const sendUserSocket = onlineUsers.get(data.to);
    console.log("üìû Caller:", data.from.id, "‚Üí Receiver:", data.to);
    console.log("üß≠ Online users map:", Array.from(onlineUsers.entries()));
    if (sendUserSocket) {
      io.to(sendUserSocket).emit("incoming-voice-call", {
        id: data.from.id,
        from: data.from,
        callType: data.callType,
        roomId: data.roomId,
      });
      console.log("üìû ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì incoming-voice-call ‡πÑ‡∏õ‡∏¢‡∏±‡∏á:", data.to);
    } else {
      console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö socket ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö:", data.to);
    }
  });

  // üìπ Video Call
  socket.on("outgoing-video-call", (data) => {
    const sendUserSocket = onlineUsers.get(data.to);
    if (sendUserSocket) {
      io.to(sendUserSocket).emit("incoming-video-call", {
        id: data.from.id,
        from: data.from,
        roomId: data.roomId,
        callType: data.callType,
      });
      console.log("üé• ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì incoming-video-call ‡πÑ‡∏õ‡∏¢‡∏±‡∏á:", data.to);
    } else {
      console.log("‚ö†Ô∏è No socket found for receiver", data.to);
    }
  });

  // ‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£ (‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ unified: reject-call)
  socket.on("reject-call", (data) => {
    const sendUserSocket = onlineUsers.get(data.from);
    if (sendUserSocket) {
      socket.to(sendUserSocket).emit("reject-call");
      console.log("üì¥ ‡∏™‡πà‡∏á reject-call ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á:", data.from);
    }
  });

  // ‚úÖ ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤ (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á roomId ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á caller)
  socket.on("accept-incoming-call", ({ id, roomId }) => {
    const sendUserSocket = onlineUsers.get(id);
    console.log("üì© [Server] ‡∏£‡∏±‡∏ö event accept-incoming-call ‡∏à‡∏≤‡∏Å:", socket.id);
    console.log("‚Ü©Ô∏è ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠ event accept-call ‡πÑ‡∏õ‡∏´‡∏≤ caller:", id, "roomId:", roomId);

    if (sendUserSocket) {
      socket.to(sendUserSocket).emit("accept-call", { roomId });
      console.log("üì≤ ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö call:", id, "roomId:", roomId);
    } else {
      console.log("‚ö†Ô∏è [Server] ‡πÑ‡∏°‡πà‡∏û‡∏ö socket ‡∏Ç‡∏≠‡∏á caller:", id);
    }
  });
});
