// server/controllers/AuthController.js
import getPrismaInstance from "../utils/PrismaClient.js";
import { generateToken04 } from "../utils/TokenGenerator.js";
import bcrypt from "bcrypt";

// üîπ Regex ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
const EMAIL_REGEX = /^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/i;

// (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß/‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå
const DISPOSABLE_DOMAINS = new Set([
  "mailinator.com", "10minutemail.com", "guerrillamail.com",
  "tempmail.com", "dispostable.com"
]);

/* ----------------------------------------
üìå REGISTER - ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
---------------------------------------- */
export const registerUser = async (req, res, next) => {
  try {
    let { email, password, firstName, lastName, about = "", image = "" } = req.body;

    // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö-‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
    email = (email || "").trim().toLowerCase();
    firstName = (firstName || "").trim();
    lastName = (lastName || "").trim();
    about = (about || "").trim();

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    if (!email || !password || !firstName || !lastName) {
      return res.status(400).json({ status: false, msg: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    if (!EMAIL_REGEX.test(email)) {
      return res.status(400).json({ status: false, msg: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    const domain = email.split("@")[1];
    if (DISPOSABLE_DOMAINS.has(domain)) {
      return res.status(400).json({ status: false, msg: "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ" });
    }

    // ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    if (password.length < 8) {
      return res.status(400).json({ status: false, msg: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" });
    }
    if (firstName.length < 2 || lastName.length < 2) {
      return res.status(400).json({ status: false, msg: "‡∏ä‡∏∑‡πà‡∏≠/‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" });
    }
    if (about.length > 200) {
      return res.status(400).json({ status: false, msg: "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 200 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" });
    }

    const prisma = getPrismaInstance();

    // üîé ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏• (lowercase)
    const existingUser = await prisma.user.findUnique({ where: { email } });
    if (existingUser) {
      return res.status(409).json({ status: false, msg: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // üîê Hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const hashedPassword = await bcrypt.hash(password, 10);

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö)
    const user = await prisma.user.create({
      data: {
        email,
        password: hashedPassword,
        firstName,
        lastName,
        about,
        profilePicture: image,
      },
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        about: true,
        profilePicture: true,
      },
    });

    return res.status(201).json({ status: true, msg: "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", user });
  } catch (err) {
    next(err);
  }
};

/* ----------------------------------------
üìå LOGIN - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
---------------------------------------- */
export const loginUser = async (req, res, next) => {
  try {
    let { email, password } = req.body;
    email = (email || "").trim().toLowerCase();

    if (!email || !password) {
      return res.status(400).json({ status: false, msg: "‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" });
    }
    if (!EMAIL_REGEX.test(email)) {
      return res.status(400).json({ status: false, msg: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const prisma = getPrismaInstance();
    const user = await prisma.user.findUnique({ where: { email } });
    if (!user) {
      return res.status(404).json({ status: false, msg: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ status: false, msg: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // ‚úÖ ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    const safeUser = {
      id: user.id,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName,
      about: user.about,
      profilePicture: user.profilePicture,
    };

    return res.status(200).json({ status: true, msg: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", user: safeUser });
  } catch (err) {
    next(err);
  }
};

/* ----------------------------------------
üìå GET ALL USERS - ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (group by ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
---------------------------------------- */
export const getAllUsers = async (req, res, next) => {
  try {
    const prisma = getPrismaInstance();

    const users = await prisma.user.findMany({
      orderBy: { firstName: "asc" },
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        profilePicture: true,
        about: true,
      },
    });

    const usersGroupByInitialLetter = {};
    users.forEach((user) => {
      const initial = user.firstName ? user.firstName.charAt(0).toUpperCase() : "#";
      if (!usersGroupByInitialLetter[initial]) usersGroupByInitialLetter[initial] = [];
      usersGroupByInitialLetter[initial].push(user);
    });

    return res.status(200).json({ users: usersGroupByInitialLetter });
  } catch (err) {
    next(err);
  }
};

/* ----------------------------------------
üìå TOKEN GENERATOR - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Video/Voice Call (Zego)
---------------------------------------- */
export const generateToken = (req, res, next) => {
  try {
    const appId = parseInt(process.env.NEXT_PUBLIC_ZEGO_APP_ID);
    const serverSecret = process.env.NEXT_PUBLIC_ZEGO_SERVER_ID;
    const userId = req.params.userId;
    const effectiveTime = 3600; // 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    const payload = "";

    if (appId && serverSecret && userId) {
      const token = generateToken04(appId, userId, serverSecret, effectiveTime, payload);
      return res.status(200).json({ status: true, msg: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", token });
    } else {
      return res.status(400).json({ status: false, msg: "‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏≠‡∏õ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
    }
  } catch (err) {
    next(err);
  }
};
