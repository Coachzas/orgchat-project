import prisma from "../utils/PrismaClient.js";

/**
 * üß© ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
 */
export const getAllUsers = async (req, res) => {
  try {
    const users = await prisma.user.findMany({
      select: {
        id: true,
        firstName: true,
        lastName: true,
        email: true,
        role: true,
        about: true,
      },
      orderBy: { id: "asc" },
    });
    res.status(200).json(users);
  } catch (error) {
    console.error("‚ùå [AdminController] getAllUsers:", error);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ" });
  }
};

/**
 * üõ† ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ + broadcast ‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡∏ú‡πà‡∏≤‡∏ô Socket.IO
 */
export const updateUserRole = async (req, res) => {
  try {
    const { id } = req.params;
    const { role } = req.body;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (!["employee", "admin", "manager"].includes(role)) {
      return res.status(400).json({ error: "role ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const updatedUser = await prisma.user.update({
      where: { id: parseInt(id) },
      data: { role },
      select: {
        id: true,
        firstName: true,
        lastName: true,
        email: true,
        role: true,
      },
    });

    // ‚úÖ Broadcast event ‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
    const io = req.app.get("io");
    if (io) {
      io.emit("role-updated", {
        id: updatedUser.id,
        role: updatedUser.role,
        firstName: updatedUser.firstName,
        lastName: updatedUser.lastName,
      });
      console.log(
        `‚ö° [Socket.IO] role-updated -> user ${updatedUser.id} (${updatedUser.firstName}): ${updatedUser.role}`
      );
    }

    res.status(200).json({
      message: `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô ${role} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
      user: updatedUser,
    });
  } catch (error) {
    console.error("‚ùå [AdminController] updateUserRole:", error);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï role ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ" });
  }
};

/**
 * üì¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® (broadcast message)
 */
export const createAnnouncement = async (req, res) => {
  try {
    const { message } = req.body;
    const senderId = req.session.user?.id;

    if (!message || !senderId) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®" });
    }

    const newAnnouncement = await prisma.message.create({
      data: {
        senderId,
        message,
        type: "text",
      },
    });

    // ‚úÖ Broadcast ‡πÑ‡∏õ‡∏ó‡∏∏‡∏Å client
    const io = req.app.get("io");
    if (io) {
      io.emit("announcement", newAnnouncement);
      console.log("üì¢ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏´‡∏°‡πà broadcast:", message);
    }

    res.status(201).json({
      message: "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      announcement: newAnnouncement,
    });
  } catch (error) {
    console.error("‚ùå [AdminController] createAnnouncement:", error);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ" });
  }
};

/**
 * üë• ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏´‡∏£‡∏∑‡∏≠ Manager ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 */
export const createGroupByAdmin = async (req, res) => {
  try {
    const { name, about, memberIds } = req.body;
    const creatorRole = req.session.user?.role;
    const creatorId = req.session.user?.id;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
    if (!["admin", "manager", "employee"].includes(creatorRole)) {
      return res.status(403).json({ error: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°" });
    }

    if (!name || !memberIds || !Array.isArray(memberIds) || memberIds.length === 0) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏ô" });
    }

    if (!memberIds.includes(creatorId)) {
      memberIds.push(creatorId);
    }

    const newGroup = await prisma.group.create({
      data: {
        name,
        about: about || null,
        members: {
          create: memberIds.map((userId) => ({ userId: Number(userId) })),
        },
      },
      include: { members: { include: { user: true } } },
    });

    console.log(`‚úÖ [AdminController] ${creatorRole} ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° "${name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

    // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á event ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
    const io = req.app.get("io");
    if (io) io.emit("group-created", newGroup);

    res.status(201).json({
      message: `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° ${name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
      group: newGroup,
    });
  } catch (error) {
    console.error("‚ùå [AdminController] createGroupByAdmin:", error);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ" });
  }
};
